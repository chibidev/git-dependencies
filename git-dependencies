#!/usr/bin/env python3.4

import argparse
import subprocess
from git.repositories import GitDependenciesRepository

def call_command(args):
	repo = GitDependenciesRepository()
	if (args.command == 'add'):
		repo.addDependency(url = args.arg0, path = args.arg1, ref = args.arg2)
	elif (args.command == 'remove' or args.command == 'rm'):
		repo.removeDependency(path = args.arg0)
	elif (args.command == 'update'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.updateDependencies(args.arg0, args.recursive)
	elif (args.command == 'freeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.freezeDependency(path = args.arg0, recursive = args.recursive)
	elif (args.command == 'unfreeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.unfreezeDependency(path = args.arg0, recursive = args.recursive)
	elif (args.command == 'dump'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.dumpDependency(args.arg0, args.recursive, args.dump_header)
	elif (args.command == 'foreach'):
		repo.foreachDependency(args.arg0, args.recursive)

	#for submodule in repo.submodules():
	#	print(submodule)

parser = argparse.ArgumentParser(prog='git dependencies', description='Manage dependencies in git repositories')
parser.add_argument('-r', '--recursive', action='store_true', help='recurse into dependencies')
parser.add_argument('-d', '--dump-header', action='store_true', help='dump revision informations as preprocessor macros')
parser.add_argument('command', choices=['add', 'rm', 'remove', 'update', 'freeze', 'unfreeze', 'dump', 'foreach'])
parser.add_argument('arg0', nargs='?', default='')
parser.add_argument('arg1', nargs='?', default='')
parser.add_argument('arg2', nargs='?', default='')

args = parser.parse_args()
call_command(args)
