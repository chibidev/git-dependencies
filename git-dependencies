#!/usr/bin/env python3.4

import argparse
import os
import os.path
import sys
import configparser
import subprocess

GITDEPENDS_FILE = '.gitdepends'

def error(*objs):
	print('Error:', *objs, file=sys.stderr)
	sys.exit(2)

def add_dep(url, path, ref):
	if (ref == ''):
		ref = 'master'
	if (os.path.exists(path)):
		if (os.listdir(path) != []):
			error(path + ' is not empty!')
	config = configparser.ConfigParser()
	if (os.path.exists(GITDEPENDS_FILE)):
		config.read(GITDEPENDS_FILE)
	config.add_section(path)
	config[path]['url'] = url
	config[path]['ref'] = ref
	with open(GITDEPENDS_FILE, 'w') as configFile:
		config.write(configFile)
		
	with open('.gitignore', 'a') as ignoreFile:
		ignoreFile.write(path + os.linesep)
		
def rm_dep(path):
	config = configparser.ConfigParser()
	config.read(GITDEPENDS_FILE)
	config.remove_section(path)
	with open(GITDEPENDS_FILE, 'w') as configFile:
		config.write(configFile)
		
def update_deps(recursive, path):
	config = configparser.ConfigParser()
	config.read(GITDEPENDS_FILE)
	if (path == '*'):
		sections = config.sections()
	else:
		sections = [path]
	for path in sections:
		wd = os.getcwd()
		if (not os.path.exists(path)):
			rc = os.system('git clone --recursive ' + config[path]['url'] + ' ' + path)
			if (rc != 0):
				error('Command failed')

		os.chdir(path)

		rc = os.system('git checkout --quiet ' + config[path]['ref'])
		if (rc != 0):
			error('Command failed')
		rc = os.system('git fetch --quiet origin')
		if (rc != 0):
			error('Command failed')
		if (not config.has_option(path, 'freezed')):
			proc = subprocess.Popen(['git', 'rev-parse', 'FETCH_HEAD'], stdout=subprocess.PIPE)
			fetchHead = proc.stdout.read().decode("utf-8").strip()
			proc = subprocess.Popen(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE)
			head = proc.stdout.read().decode("utf-8").strip()

			proc = subprocess.Popen(['git', 'log', '--oneline', '--color=always', head + '..' + fetchHead], stdout=subprocess.PIPE)
			commits = proc.stdout.read().decode("utf-8").strip()
			rc = os.system('git rebase --quiet --autostash')
			if (rc != 0):
				error('Command failed')

			if (commits != ''):
				print ('Commits integrated to ' + path + ':')
				for line in iter(commits.splitlines()):
					print ("\t" + line)
		if (recursive):
			if (os.path.exists(GITDEPENDS_FILE)):
				update_deps(recursive, '*')

		rc = os.system('git submodule update --init --recursive')
		if (rc != 0):	
			error('Command failed')
		os.chdir(wd)
		
def freeze_deps(recursive, path):
	config = configparser.ConfigParser()
	config.read(GITDEPENDS_FILE)
	if (path == '*'):
		sections = config.sections()
	else:
		sections = [path]
	for path in sections:
		wd = os.getcwd()
		os.chdir(path)
		if (recursive):
			if (os.path.exists(GITDEPENDS_FILE)):
				freeze_deps(recursive)
		proc = subprocess.Popen(['git', 'rev-parse', config[path]['ref']], stdout=subprocess.PIPE)
		hash = proc.stdout.read().decode("utf-8").strip()
		rc = os.system('git checkout ' + hash)
		if (rc != 0):
			error('Command failed')
		config[path]['freezed'] = config[path]['ref']
		config[path]['ref'] = hash
		os.chdir(wd)
	with open(GITDEPENDS_FILE, 'w') as configFile:
		config.write(configFile)
	rc = os.system('git commit -m "Freezing dependencies" -- ./' + GITDEPENDS_FILE)
	if (rc != 0):
		error('Command failed')
		
def unfreeze_deps(recursive, path):
	config = configparser.ConfigParser()
	config.read(GITDEPENDS_FILE)
	if (path == '*'):
		sections = config.sections()
	else:
		sections = [path]
	for path in sections:
		wd = os.getcwd()
		os.chdir(path)
		if (recursive):
			if (os.path.exists(GITDEPENDS_FILE)):
				unfreeze_deps(recursive)
		rc = os.system('git checkout ' + config[path]['freezed'])
		if (rc != 0):
			error('Command failed')
		config[path]['ref'] = config[path]['freezed']
		config.remove_option(path, 'freezed')
		os.chdir(wd)
	with open(GITDEPENDS_FILE, 'w') as configFile:
		config.write(configFile)
	rc = os.system('git commit -m "Unfreezing dependencies" -- ./' + GITDEPENDS_FILE)
	if (rc != 0):
		error('Command failed')
        
def dump_deps(recursive, path, dumpHeader):
	config = configparser.ConfigParser()
	config.read(GITDEPENDS_FILE)
	if (path == '*'):
		sections = config.sections()
	else:
		sections = [path]
	for path in sections:
		wd = os.getcwd()
		os.chdir(path)
		if (recursive):
			if (os.path.exists(GITDEPENDS_FILE)):
				dump_deps(recursive, '*', dumpHeader)
		proc = subprocess.Popen(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], stdout=subprocess.PIPE)
		branch = proc.stdout.read().decode("utf-8").strip()
		proc = subprocess.Popen(['git', 'rev-parse', '--abbrev-ref', 'HEAD@{upstream}'], stdout=subprocess.PIPE)
		remote = proc.stdout.read().decode("utf-8").strip()
		proc = subprocess.Popen(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE)
		hash = proc.stdout.read().decode("utf-8").strip()
		if (not dumpHeader):
			print ('Dependency ' + path + ' is following ' + branch + ' (tracking: ' + remote + ') is now at rev ' + hash)
		else:
			sanitizedPath = path.replace('/', '_').replace(' ', '_').upper();
			print ('#define ' + sanitizedPath + '_BRANCH "' + branch + '"')
			print ('#define ' + sanitizedPath + '_REMOTE "' + remote + '"')
			print ('#define ' + sanitizedPath + '_HASH "' + hash + '"')
			print ('')
		os.chdir(wd)

def call_command(args):
	if (not os.path.isdir('.git')):
		error('Not a git repository')
	if (args.command == 'add'):
		add_dep(args.arg0, args.arg1, args.arg2)
	elif (args.command == 'remove' or args.command == 'rm'):
		rm_dep(args.arg0)
	elif (args.command == 'update'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		update_deps(args.recursive, args.arg0)
	elif (args.command == 'freeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		freeze_deps(args.recursive, args.arg0)
	elif (args.command == 'unfreeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		unfreeze_deps(args.recursive, args.arg0)
	elif (args.command == 'dump'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		dump_deps(args.recursive, args.arg0, args.dump_header)

parser = argparse.ArgumentParser(prog='git dependencies', description='Manage dependencies in git repositories')
parser.add_argument('-r', '--recursive', action='store_true', help='recurse into dependencies')
parser.add_argument('-d', '--dump-header', action='store_true', help='dump revision informations as preprocessor macros')
parser.add_argument('command', choices=['add', 'rm', 'remove', 'update', 'freeze', 'unfreeze', 'dump'])
parser.add_argument('arg0', nargs='?', default='')
parser.add_argument('arg1', nargs='?', default='')
parser.add_argument('arg2', nargs='?', default='')

args = parser.parse_args()
# print(args)
call_command(args)
