#!/usr/bin/env python3.4 -u

import argparse
import subprocess
import sys
import codecs
import platform

from git.repositories import GitDependenciesRepository
from git.os_types import generate_os_types

sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)


def call_command(args):
	repo = GitDependenciesRepository()
	if (args.command == 'add'):
		repo.addDependency(url = args.arg0, path = args.arg1, ref = args.arg2)
	elif (args.command == 'remove' or args.command == 'rm'):
		repo.removeDependency(path = args.arg0)
	elif (args.command == 'update'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		if (args.os_filter == ''):
			args.os_filter = platform.system()
		repo.updateDependencies(args.arg0, args.recursive, generate_os_types(args.os_filter))
	elif (args.command == 'freeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.ensureNoSymlinkExistsInDependencySubtree(path = args.arg0, recursive = args.recursive)
		repo.freezeDependency(path = args.arg0, recursive = args.recursive)
	elif (args.command == 'unfreeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.ensureNoSymlinkExistsInDependencySubtree(path = args.arg0, recursive = args.recursive)
		repo.unfreezeDependency(path = args.arg0, recursive = args.recursive)
	elif (args.command == 'dump'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.dumpDependency(args.arg0, args.recursive, args.dump_header)
	elif (args.command == 'foreach'):
		repo.foreachDependency(args.arg0, args.recursive)
	elif (args.command == 'set'):
		repo.setDependency(path = args.arg0, ref = args.arg1)
	elif (args.command == 'set-os-filter'):
		args.arg1 = [x.strip().lower() for x in args.arg1.split(',')] if args.arg1 != '' else []
		repo.setOSFilter(path = args.arg0, osFilter = args.arg1)

	#for submodule in repo.submodules():
	#	print(submodule)

parser = argparse.ArgumentParser(prog='git dependencies', description='Manage dependencies in git repositories')
parser.add_argument('-r', '--recursive', action='store_true', help='recurse into dependencies')
parser.add_argument('-d', '--dump-header', action='store_true', help='dump revision informations as preprocessor macros')
parser.add_argument('-of', '--os-filter', action='store', default='', help='Filter dependencies by OS types e.g.: mac,ios,win. Default allows every OS types')
parser.add_argument('command', choices=['add', 'rm', 'remove', 'update', 'freeze', 'unfreeze', 'dump', 'foreach', 'set', 'set-os-filter'])
parser.add_argument('arg0', nargs='?', default='')
parser.add_argument('arg1', nargs='?', default='')
parser.add_argument('arg2', nargs='?', default='')

args = parser.parse_args()
call_command(args)
