#!/usr/bin/env python3

import argparse
import subprocess
import sys
import codecs
import os
import platform
import json

from git.os_types import generate_os_types
from git.dump import DumpType
from git.dependencies import GitDependenciesRepository
from utils.unbuffered import Unbuffered

def call_command(args):
	repo = GitDependenciesRepository()
	if (args.command == 'add'):
		repo.addDependency(url = args.arg0, path = args.arg1, ref = args.arg2)
	elif (args.command == 'remove' or args.command == 'rm'):
		repo.removeDependency(path = args.arg0)
	elif (args.command == 'update'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		if (args.os_filter == ''):
			args.os_filter = platform.system()
		overrides = None
		if (args.overrides):
			with open(args.overrides) as overridesFile:
				print('Using overrides file {}'.format(overridesFile.name))
				overrides = json.load(overridesFile)
		repo.updateDependencies(path = args.arg0, recursive = args.recursive, osFilter = generate_os_types(args.os_filter), overrides = overrides, override_all = args.override_all)
	elif (args.command == 'freeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.ensureNoSymlinkExistsInDependencySubtree(path = args.arg0, recursive = args.recursive)
		repo.freezeDependency(path = args.arg0, recursive = args.recursive)
	elif (args.command == 'unfreeze'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		repo.ensureNoSymlinkExistsInDependencySubtree(path = args.arg0, recursive = args.recursive)
		repo.unfreezeDependency(path = args.arg0, recursive = args.recursive)
	elif (args.command == 'dump'):
		if (args.arg0 == ''):
			args.arg0 = '*'

		if (args.dump_custom):
			dump_type = DumpType.Custom
		elif (args.dump_header):
			dump_type = DumpType.Header
		else:
			dump_type = DumpType.Default

		customString = args.dump_custom if dump_type == DumpType.Custom else ''
		repo.dumpDependency(args.arg0, args.recursive, dump_type, customString)
	elif (args.command == 'foreach'):
		repo.foreachDependency(args.arg0, args.recursive)
	elif (args.command == 'set'):
		repo.setDependency(path = args.arg0, ref = args.arg1)
	elif (args.command == 'set-command'):
		repo.command(path = args.arg0, command = args.arg1)
	elif (args.command == 'set-os-filter'):
		args.arg1 = [x.strip().lower() for x in args.arg1.split(',')] if args.arg1 != '' else []
		repo.setOSFilter(path = args.arg0, osFilter = args.arg1)
	elif (args.command == 'dump-deps'):
		if (args.arg0 == ''):
			args.arg0 = '*'
		depStore = {}
		repo.dumpDeps(path = args.arg0, recursive = args.recursive, depStore = depStore)
		print(json.dumps(depStore))

def create_parser():
	parser = argparse.ArgumentParser(prog='git dependencies',
									 description='Manage dependencies in git repositories',
									 formatter_class=argparse.RawTextHelpFormatter)
	parser.add_argument('-r', '--recursive', action='store_true', help='recurse into dependencies')
	parser.add_argument('-o', '--overrides', help='override dependencies from file')
	parser.add_argument('-oa', '--override-all', action='store_true', help='enforce complete override (fail if a dependency is not overridden)')

	# dump parser
	dumpParser = parser.add_mutually_exclusive_group(required=False)
	dumpParser.add_argument('-d', '--dump-header', action='store_true', help='dump revision informations as preprocessor macros')
	dumpCustomeHelp = """dump revision informations in a custom format
		default:
			`Dependency <dependency> following <branch> (tracking: <remote branch>) is now at rev <sha1>`
		header:
			#define <sanitized path>_BRANCH "<branch>"
			#define <sanitized path>_REMOTE "<remote branch>"
			#define <sanitized path>_HASH "<sha1>"
		custom: custom string with a following substitutions:
			%%dependencyName%% = current dependency name
			%%dependency%% = current dependency path
			%%branch%% = current branch
			%%remoteBranch%% = current remote branch
			%%sha1%% = current sha1
			%%sanitizedName%% = current sanitized dependency name e.g. DEP
			%%sanitizedPath%% = current sanitized dependency path e.g. DEPENDENCIES_DEP
	"""
	dumpParser.add_argument('--dump-custom', action='store', default='', help=dumpCustomeHelp)

	#other parser aguments
	parser.add_argument('-of', '--os-filter', action='store', default='', help='Filter dependencies by OS types e.g.: mac,ios,win. Default allows every OS types')
	parser.add_argument('command', choices=['add', 'rm', 'remove', 'update', 'freeze', 'unfreeze', 'dump', 'foreach', 'set', 'set-command', 'set-os-filter', 'dump-deps'])
	parser.add_argument('arg0', nargs='?', default='')
	parser.add_argument('arg1', nargs='?', default='')
	parser.add_argument('arg2', nargs='?', default='')
	return parser

def main():
	sys.stdout = Unbuffered(codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict'))
	sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)
	parser = create_parser()
	args = parser.parse_args()
	call_command(args)

if __name__ == '__main__':
	main()
